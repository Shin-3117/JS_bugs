// 권장 스타일 가이드
// https://standardjs.com/rules-kokr

/*
let, const
- 블록 스크포를 갖는 지역 변수 선언
- 재선언 불가능
- ES6에서 추가
- let은 재할당 가능, const는 재할당 불가능

var
- 함수 스코프를 가짐
- 재할당, 재선언 가능
*/
const a = 1
// const a //err : 재선언이 불가능 해서
var c=1
var c=2 // 재선언이 가능해 err 미발생
/*
var의 단점 (vs let,const)
- 함수 레벨 스코프
- var 키워드 생략 허용
- 변수 중복 선언 허용
- 변수 호이스팅 발생
- 긴 생명주기
- 암묵적 결합
- 스코프 체인 상 종점에 위치
- 네임스페이스 오염

암묵적 결합
암묵적 결합이란 모든 코드가 전역 변수를 참조하고 변경할 수 있다는 것을 의미
변수의 유효 범위가 크면 클수록 코드의 가독성은 나빠지고 의도치 않게 상태가 변경될 수 있는 위험성도 높아진다.

스코프 체인 상 종점에 위치
전역 변수는 스코프 체인 상에서 종점에 존재하여 
변수를 검색할대 전역 변수가 가장 마지막에 검색된다.
즉, 전역 변수의 검색 속도가 가장 느리다. 
검색 속도의 차이가 그다지 크지는 않지만 분명히 있다.

네임스페이스 오염
파일이 분리되어 있어도 하나의 전역 스코프를 공유하기에, 
다른 파일 내 동일한 이름으로 명명된 변수나 함수는 예상치 못한 결과를 가져올 수 있음
*/